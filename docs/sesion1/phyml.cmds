#--------------------------------------------------------
# >>>>>>>>>>>> Tutoral de uso de phyml3 <<<<<<<<<<<<<<<<<
# -------------------------------------------------------
# Pablo Vinuesa; http://www.ccg.unam.mx:/~vinuesa/
# 25 Julio 2018. 
# Para: qBio18, sesion de Introduccion a la Filoinformatica
# CCG-UNAM, Mexico http://www.qbio18.mx/
# https://github.com/vinuesa/qBio
===========================================================


#### >>>>> NOTAS DE INSTALACION DE PHYML DESDE EL REPOSITORIO GitHub <<<<< ####

# 1. Necesitas tener instalado git en tu computadora. En ubuntu:
sudo apt-get install git

# 2. Ahora clonas el repositorio de phyml3 en GitHub

# 2.1 Crea un directorio GitHub y entra en el
mkdir GitHub && cd GitHub

# 3. ve a la pagina de GitHub y busca la url del proyecto phyml; copia la liga y usala con el comando git
git clone https://github.com/stephaneguindon/phyml.git

# 4. Un ls mostarara el nuevo dir phyml; entra en el para compilar
cd phyml/

# siempre conviene leer documentacion; 1. el README; 2. en doc/ esta el manual con mas detalles para la instalacion
cat README

./autogen.sh;

cd doc
cd phyml/doc/

# leemos manual con evince
evince phyml-manual.pdf &

# una vez encontarada la info de como compilar, vamos con ello:
cd ..
./configure;
make clean;
make V=0;

# 5. Encontraremos el binario generado en src
cd src && ls phyml

# 6. Sugiero movel phyml a un directorio en el $PATH
# Yo guardo bianrios compilados por mi en: /usr/local/biotools/bin
# Este direcorio lo he agregado en mi .bashrc a la variable de ambiente PATH
# para que cualquier binario alojado en ese dir, sea visible en todo el sistema
sudo cp phyml /usr/local/biotools/bin

#--------------------------------------------------------------------------------------#

############################################################################
#>>>> USO DE PHYML y seleccion de modelos de sustitucion nucleotidica <<<<<#
############################################################################

# Opciones mas usadas de PhyML v3

# para ver la ayuda: phyml --help

# 1) Un ejemplo de corrida del set de primates bajo el modelo definido en PAUP como: rclass=(a b c c b f) para tasas: ac ag at cg ct gt, respectivamente
# -i input_file
# -d nt|aa
# -b -4 usa SH-like branch support values (-b 100 corre 100 repl de bootstrap)
# -m  PARA NT: (modelo de sustitucion HKY85 (default) | JC69 | K80 | F81 | F84 | TN93 | GTR o definido con modificadores de tasa 012345 (ac ag at cg ct gt)
# -m PARA AA LG (default) WAG | JTT | MtREV | Dayhoff | DCMut | RtREV | CpREV | VT | Blosum62 | MtMam | MtArt | HIVw |  HIVb | custom
# -f frec. de nt [e empirica| m estimada por ML]
# -t ts/tv
# -v prop inv [0,1] o estimarla con e
# -c no. clases para discretizar la funcion gamma
# -a e (estima gamma) -a digito (fija su valor)
# -s (define la busqueda o search) NNI SPR BEST (mejor de ambas)
# --rand_start (inicia busquedas de arboles de adic. sec. aleatorizada)
# --n_rand_starts no. (no. de arboles semilla)



# A: Ejemplo de corrida para NT; recureda que los modificatodres de tasa indicados con -m se aplican en este orden: (ac ag at cg ct gt)
phyml -i primates.phy -m HKY85 -c 4 -a e -o tlr -s BEST --rand_start --n_rand_starts 5

# podemos visualizar el arbol con:
figtree primates.ph &



# B: Ejemplo de corrida para AA
phyml -i 10_GDP_eucar_prokar_cluO_prof2prof.faa  -d aa -m WAG -c 4 -a e -v e -s BEST


#-------------------------------------------#
# >>> SELECCION DE MODELOS USANDO PHYML <<< #
#-------------------------------------------#

# Nota: para acelerar el procedimiento de seleccion de modelos, podemos usar un arbol aproximado, tipo NJ, calculado rapidamente
#  bajo el modelo mas sencillo, sin optimizar parametros. Esta filogenia la usaremos para 
# para los pasos siguientes, evitando tener que volver a estimar topologia y longitudes de rama, 
# dejando que phyml optimice solo los valores de los parametros del modelo bajo evaluacion:

phyml -i primates.phy -m 000000 -o n

# renombremos el archivo
mv primates.phy_phyml_tree.txt primates_JC.ph

# podemos visualizar el arbol con:
figtree primates_JC.ph &

### >>>>> ahora veamos la seleccion de modelos (JC vs K2P, JC vs F81; JC vs HKY; HKY vs HKY+G, primero a mano: <<<<< ###
# codificacion de tasas de sustitucion relativas: 012345 (ac ag at cg ct gt)
# Comencemos evaluacion de modelos; anota el valor de -lnL para cada caso

# 1. Modelo JC
phyml -i primates.phy -d nt -m JC69 -c 1 -b 0 -u primates_JC.ph -o lr

# Anotemos el valor de Log-likelihood para este modelo
cat *stats

# o usando grep:
grep Log-likelihood *stats.txt
grep Log-likelihood *stats.txt > JC.fit


# 2. Modelo K80
phyml -i primates.phy -d nt -m k80 -c 1 -u primates_JC.ph -o lr

grep Log- *stats.txt > K80.fit

# 3. Modelo F81
#  phyml -i primates.phy -d nt -m f81 -c 1 -u primates_JC.ph -o lr
phyml -i primates.phy -d nt -m 111111 -f e -c 1 -u primates_JC.ph -o lr

grep Log- *stats.txt > F81.fit

# 4. Modelo HKY85
#  phyml -i primates.phy -d nt -m hky85 -c 1 -u primates_JC.ph -o lr
phyml -i primates.phy -d nt -m 121121 -f e -c 1 -u primates_JC.ph -o lr

grep Log- *stats.txt > HKY85.fit

# 5. Modelo HKY85+G
#phyml -i primates.phy -d nt -m hky85 -c 4 -a e -u primates_JC.ph -o lr
phyml -i primates.phy -d nt -m 121121 -f e -c 4 -a e -u primates_JC.ph -o lr

grep Log- *stats.txt > HKY85G.fit

# 6. Modelo HKY85+G+I
#  phyml -i primates.phy -d nt -m hky85 -c 4 -a e -v e -u primates_JC.ph -o lr
phyml -i primates.phy -d nt -m 121121 -f e -c 4 -a e -v e -u primates_JC.ph -o lr

grep Log- *stats.txt > HKY85GI.fit

#---------------------------------------#
### >>> ANALIZEMOS LOS RESULTADOS <<< ###
#---------------------------------------#

# veamos el listado de archivos *.fit, en formato de una linea
ls -1 *fit
ls -1 *fit > fit.order

# peguemos todos los archivos *.fit, uno detras del otro, en el orden que nos muestra ls -1 *.fit
cat *fit > model_fit.list

# paste pega archivos uno al lado del otro, muy util para generar tablas desde varios archivos
paste fit.order model_fit.list 

# con awk podemos seleccionar facilmente las columnas que nos interesan
paste fit.order model_fit.list | awk '{print $1,$4}'

# e incluso formatearlas, delimitando los campos con comas o tabuladores
paste fit.order model_fit.list | awk 'BEGIN{OFS=","}{print $1, $4}' | sed 's/\.fit//' > model_fits.csv
paste fit.order model_fit.list | awk 'BEGIN{OFS="\t"}{print $1, $4}' | sed 's/\.fit//' > model_fits.tsv

# veamos la tabla que generamos
cat model_fits.tsv

# limpiemos un poco el directorio de trabajo
rm *list *fit *order


# ------------------------------------------ #
# >>> AVANZADO: Uso de R para hacer LRTs <<< #
# ------------------------------------------ #
#   %  EJERCICIO PARA ESTUDIO PERSONAL  %

# 6. Evaluacion del merito relativo de los modelos HKY85+G vs HKY85+G+I 
#    mediante la prueba de cocientes de verosimilitud (LRT), en R
R

# 6.1 leamos los datos en una estructura tipo dataframe
system("ls")
dfr <- read.csv(file="model_fits.csv", header = FALSE)

# ver la estructura del data frame
str(dfr)

# imprimelo a pantalla
dfr

# aniadimos un header (nombramos las columnas con las variables)
names(dfr) <- c("model", "lnL")


# 6.2 veamos un plot sencillo y rapdio; que puedes concluir?
plot(dfr$model, dfr$lnL, xlab="substitution models", ylab="ln-L values", main="comparing model fits")


# 6.3 Entre los dos modelos que parecen empatados, veamos si existen o no diferencias significativas, 
#     corriendo una prueba estadistica formal: dado que los modelos HKY+G u HKY+G+I estan anidados,
#     podemos correr un simple LRT (prueba de razones de verosimilitudes)

dfr

xsq <- 2*( -5728.070648 - -5728.420133) # 2 veces la diferencia de lnL entre el modelo nulo - alternativo
xsq # [1] 0.69897
pchisq(xsq,1)  #  0.59687;  este es el valor critico de la X2 para el estadistico LRT con 1 grado de libertad; [1] 1
1-(pchisq(xsq,1))  #0.40313 esta es la p, SIGNIFICATIVA con alpha = 0.05, pero no con alpha = 0.01

q()         # para salir de R
            # decimos que NO quieren salvar sesion 

